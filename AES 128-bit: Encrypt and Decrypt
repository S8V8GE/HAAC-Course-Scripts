"""
    Author:     James Savage
    Date:       5th February 2025

    Disclaimer:
    -----------
    This Python script is provided for educational purposes only, demonstrating 
    AES CBC Mode encryption and decryption. It is intended solely for 
    learning and illustrative use and should not be used in any commercial, 
    production, or security-critical environment.
    
    This script does not replicate the exact process of AES CBC Mode encryption and decryption, 
    nor does it expose any vulnerabilities or sensitive information.

    This script is not affiliated with, endorsed by, or the responsibility of any 
    employer or organization. Use it at your own risk, and always follow best 
    practices when implementing cryptographic techniques.
"""

from Crypto.Cipher import AES
import binascii

# Set the key and data
key = bytes.fromhex("D5A36CF065E7F4516748FB313187C6C8")  # 16-byte AES key
data = bytes.fromhex("000000000000000000000000BEEFBABE")  # 16-byte data, can be extended to 32 bytes if required

# Set the Initialisation Vector (IV) for both encrypt and decrypt - Default is 00's
iv_encrypt = bytes.fromhex("00000000000000000000000000000000")  # 16-byte IV
iv_decrypt = bytes.fromhex("00000000000000000000000000000000")  # 16-byte IV

# Print data to be encrypted
print(f"Data before encryption with IV ({iv_encrypt.hex().upper()}): {data.hex().upper()}")

# Create AES cipher object in CBC mode with IV
cipher = AES.new(key, AES.MODE_CBC, iv_encrypt)

# Encrypt the data
encrypted = cipher.encrypt(data)

# Only print the full result if the encrypted data is 32 bytes
if len(encrypted) == 32:
    print(f"Encrypted (CBC) with IV ({iv_encrypt.hex().upper()}) - Full 32 bytes: ", binascii.hexlify(encrypted).decode().upper())

    # Get the first and last 16 bytes of the encrypted output
    encrypted_first_16bytes = encrypted[:16]
    encrypted_last_16bytes = encrypted[16:]

    # Output the first 16 bytes as hexadecimal
    print(f"Encrypted (CBC) with IV ({iv_encrypt.hex().upper()}) - First 16 bytes:", binascii.hexlify(encrypted_first_16bytes).decode().upper())
    # Output the first 16 bytes as hexadecimal
    print(f"Encrypted (CBC) with IV ({iv_encrypt.hex().upper()}) - Last 16 bytes:                                 ", binascii.hexlify(encrypted_last_16bytes).decode().upper())

# Else print the full result if the encrypted data is 16 bytes
else:
    print(f"Encrypted (CBC) Data with IV ({iv_encrypt.hex().upper()}):  ", binascii.hexlify(encrypted).decode().upper())

# ---- Decryption Process ----

# Create AES cipher object in CBC mode with the same IV for decryption
decipher = AES.new(key, AES.MODE_CBC, iv_decrypt)

# Decrypt the encrypted data
decrypted = decipher.decrypt(encrypted)

# Output the decrypted data as hexadecimal
print(f"Decrypted (CBC) Data with IV ({iv_decrypt.hex().upper()}):  ", binascii.hexlify(decrypted).decode().upper())
