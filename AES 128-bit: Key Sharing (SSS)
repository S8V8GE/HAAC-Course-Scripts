"""
    Author:     James Savage
    Date:       5th February 2025

    Disclaimer:
    -----------
    This Python script is provided for educational purposes only, demonstrating
    Key Sharing/Components using Shamir’s Secret Sharing (SSS). It is intended solely for
    learning and illustrative use and should not be used in any commercial,
    production, or security-critical environment.

    This script does not replicate the exact process of Key Sharing/Components using Shamir’s Secret Sharing (SSS),
    nor does it expose any vulnerabilities or sensitive information.

    This script is not affiliated with, endorsed by, or the responsibility of any
    employer or organization. Use it at your own risk, and always follow best
    practices when implementing cryptographic techniques.
"""

from Crypto.Protocol.SecretSharing import Shamir

# AES 128-bit key in HEX format (32 characters)
aes_key = "D5A36CF065E7F4516748FB313187C6C8"

# Convert HEX string to bytes
aes_key_bytes = bytes.fromhex(aes_key)

# Split the AES key into 3 shares, with a threshold of 3 shares required to reconstruct
shares = Shamir.split(3, 3, aes_key_bytes, None)

# Print the generated shares (accessing the second element of each tuple)
print("Generated shares:")
for i, share in enumerate(shares, 1):
    print(f"Share {i}: {share[1].hex()}")  # Access the second element (the share data)

# Print out all combinations
# Reconstruct the key from Share 0, 1 & 2
reconstructed_key_123 = Shamir.combine([shares[0], shares[1], shares[2]], None)
print("\nReconstructed key from Share 1, 2, and 3:")
print(reconstructed_key_123.hex())

# Reconstruct the key from Share 0, 2 & 1
reconstructed_key_132 = Shamir.combine([shares[0], shares[2], shares[1]], None)
print("\nReconstructed key from Share 1, 3, and 2:")
print(reconstructed_key_132.hex())

# Reconstruct the key from Share 1, 2, and 0
reconstructed_key_213 = Shamir.combine([shares[1], shares[0], shares[2]], None)
print("\nReconstructed key from Share 2, 1, and 3:")
print(reconstructed_key_213.hex())

# Reconstruct the key from Share 1, 0, and 2
reconstructed_key_231 = Shamir.combine([shares[1], shares[2], shares[0]], None)
print("\nReconstructed key from Share 2, 3, and 1:")
print(reconstructed_key_231.hex())

# Reconstruct the key from Share 2, 0, and 1
reconstructed_key_312 = Shamir.combine([shares[2], shares[0], shares[1]], None)
print("\nReconstructed key from Share 3, 1, and 2:")
print(reconstructed_key_312.hex())

# Reconstruct the key from Share 2, 1 and 0
reconstructed_key_321 = Shamir.combine([shares[2], shares[1], shares[0]], None)
print("\nReconstructed key from Share 3, 2, and 1:")
print(reconstructed_key_321.hex())

